;; pTON Wallet Smart Contract
;; It mimics sending of TONs as jetton transfer:
;; when it receives transfer notification it calculates receiver pTON wallet
;; and sends there internal_transfer amount of jettons is equal to amount of
;; accepted TONs minus fee
;; In turn when pTON wallet receives internal_transfer it generates transfer_notification
;; note that amount of "transferred" jettons will correspond to TON amount
;; not to amount of jettons in internal_transfer.
;; pTON also checks forward_payload: if it contains only number 8388449 encoded in 23 bits
;; it treats it as special request to "unwrap tokens" and send them directly to owner
;; This number is used since usually 32bit ops are used and collisions are not expected.

;; From jetton/minter point of view each wallet is able to mint jettons for itself.

#include "stdlib.func";
#include "jetton-utils.func";
#include "error-codes.func";
#include "op-codes.func";
#include "messages.func";
#include "params.func";

;; it is expected that gas cost will never be higher than that
;; TODO revisit
const int fee::gas_consumption = 13000000;
const special::unwrap_op_value = 8388449;
const special::unwrap_op_length = 23;


{-
  Storage
  storage#_ owner_address:MsgAddressInt jetton_master_address:MsgAddressInt jetton_wallet_code:^Cell = Storage;
-}

(slice, slice, cell) load_data() inline {
  slice ds = get_data().begin_parse();
  return (ds~load_msg_addr(), ds~load_msg_addr(), ds~load_ref());
}


(int, slice, slice, cell) get_wallet_data() method_id {
  (slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
  return (pair_first(get_balance()), owner_address, jetton_master_address, jetton_wallet_code);
}

{-
  transfer query_id:uint64 amount:(VarUInteger 16) destination:MsgAddress
           response_destination:MsgAddress custom_payload:(Maybe ^Cell)
           forward_ton_amount:(VarUInteger 16) forward_payload:(Either Cell ^Cell)
           = InternalMsgBody;
  internal_transfer  query_id:uint64 amount:(VarUInteger 16) from:MsgAddress
                     response_address:MsgAddress
                     forward_ton_amount:(VarUInteger 16)
                     forward_payload:(Either Cell ^Cell)
                     = InternalMsgBody;
-}

() send_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
  int query_id = in_msg_body~load_query_id();
  int jetton_amount = in_msg_body~load_coins();
  slice to_owner_address = in_msg_body~load_msg_addr();
  force_chain(to_owner_address);
  (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = get_wallet_data();

  throw_unless(error::unauthorized_transfer, equal_slice_bits(owner_address, sender_address));

  cell state_init = calculate_jetton_wallet_state_init(to_owner_address, jetton_master_address, jetton_wallet_code);
  slice to_wallet_address = calculate_jetton_wallet_address(state_init);
  slice response_address = in_msg_body~load_msg_addr();
  cell custom_payload = in_msg_body~load_dict();
  int forward_ton_amount = in_msg_body~load_coins();
  throw_unless(708, slice_bits(in_msg_body) >= 1);
  slice either_forward_payload = in_msg_body;
  int fwd_count = forward_ton_amount ? 2 : 1;

  ;; We either send money as in msg_value and thus allows excesses to return
  ;; or send exactly amount needed to deliver jetton_amount
  int amount = max(jetton_amount + forward_ton_amount + fwd_count * fwd_fee + 2 * fee::gas_consumption, msg_value);
  throw_unless(error::not_enough_tons, balance > amount);

  var msg = begin_cell()
    .store_msg_flag(msg_flag::bounceable)
    .store_slice(to_wallet_address)
    .store_coins(amount)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init);
  var msg_body = begin_cell()
    .store_op(op::internal_transfer)
    .store_query_id(query_id)
    .store_coins(jetton_amount)
    .store_slice(owner_address)
    .store_slice(response_address)
    .store_coins(forward_ton_amount)
    .store_slice(either_forward_payload)
    .end_cell();

  msg = msg.store_ref(msg_body);
  send_raw_message(msg.end_cell(), PAY_FEES_SEPARATELY);
}


;; order of parameters is strange, it is expected that it minimizes
;; stack permutation for gas-optimization but should be revisited
() receive_tokens_basics(int fwd_fee, int msg_value, slice owner_address, int query_id, int jetton_amount, slice from_address, slice in_msg_body) impure {
  slice response_address = in_msg_body~load_msg_addr();
  int forward_ton_amount = in_msg_body~load_coins();

  msg_value -= fee::gas_consumption + jetton_amount;
  if(forward_ton_amount) {
    msg_value -= forward_ton_amount + fwd_fee;
  }
  throw_unless(error::not_enough_tons, msg_value > 0);
  if(forward_ton_amount) {
    msg_value -= (forward_ton_amount + fwd_fee);
    slice either_forward_payload = in_msg_body;
    var msg = null();
    ;; check forward_payload for number 8388449 encoded in 23 bits
    slice forward_payload = either_forward_payload;
    if(forward_payload~load_int(1)) {
      forward_payload = forward_payload~load_ref().begin_parse();
    }
    int need_transfer_notification = true;
    if(forward_payload.slice_bits() == special::unwrap_op_length) {
      if(forward_payload.preload_uint(special::unwrap_op_length) == special::unwrap_op_value) {
        need_transfer_notification = false;
        ;; TODO we have option here to find further payload and send it, for instance text message?
        var msg_body = begin_cell()
            .store_op(op::unwrap_notification)
            .store_query_id(query_id)
            .store_coins(jetton_amount + forward_ton_amount)
            .store_slice(from_address)
            .end_cell();
        msg = begin_cell()
              .store_msg_flag(msg_flag::non_bounceable) ;; we should not bounce here cause receiver can have uninitialized contract
              .store_slice(owner_address)
              .store_coins(jetton_amount + forward_ton_amount)
              .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
              .store_ref(msg_body);
      }
    }
    if(need_transfer_notification) {
      var msg_body = begin_cell()
          .store_op(op::transfer_notification)
          .store_query_id(query_id)
          .store_coins(jetton_amount)
          .store_slice(from_address)
          .store_slice(either_forward_payload)
          .end_cell();

      msg = begin_cell()
        .store_msg_flag(msg_flag::non_bounceable) ;; we should not bounce here cause receiver can have uninitialized contract
        .store_slice(owner_address)
        .store_coins(forward_ton_amount)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body);
    }
    send_raw_message(msg.end_cell(), 1);
  }

  if ((response_address.preload_uint(2) != 0) & (msg_value > 0)) {
    var msg = begin_cell()
      .store_msg_flag(msg_flag::non_bounceable)
      .store_slice(response_address)
      .store_coins(msg_value)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_op(op::excesses)
      .store_query_id(query_id);
    send_raw_message(msg.end_cell(), 2);
  }
}


{-
  internal_transfer  query_id:uint64 amount:(VarUInteger 16) from:MsgAddress
                     response_address:MsgAddress
                     forward_ton_amount:(VarUInteger 16)
                     forward_payload:(Either Cell ^Cell)
                     = InternalMsgBody;
-}

() receive_tokens (slice in_msg_body, slice sender_address, int fwd_fee, int msg_value) impure {
  ;; NOTE we can not allow fails in action phase since in that case there will be
  ;; no bounce. Thus check and throw in computation phase.
  (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = get_wallet_data();
  int query_id = in_msg_body~load_query_id();
  int jetton_amount = in_msg_body~load_coins(); ;; ignore jetton_amount
  slice from_address = in_msg_body~load_msg_addr();
  ;; We check it here so nobody can forge the token transfer from some unowned address
  ;; for direct send use external_transfer
  throw_unless(error::unauthorized_incoming_transfer,
      equal_slice_bits(calculate_user_jetton_wallet_address(from_address, jetton_master_address, jetton_wallet_code), sender_address)
  );
  return receive_tokens_basics(fwd_fee, msg_value, owner_address, query_id, jetton_amount, from_address, in_msg_body);

}

{-
  external_transfer  query_id:uint64 amount:(VarUInteger 16)
                     response_address:MsgAddress
                     forward_ton_amount:(VarUInteger 16)
                     forward_payload:(Either Cell ^Cell)
                     = InternalMsgBody;
-}


() receive_tokens_externally (slice in_msg_body, slice sender_address, int fwd_fee, int msg_value) impure {
  (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = get_wallet_data();
  int query_id = in_msg_body~load_query_id();
  int jetton_amount = in_msg_body~load_coins(); ;; ignore jetton_amount
  return receive_tokens_basics(fwd_fee, msg_value, owner_address, query_id, jetton_amount, sender_address, in_msg_body);
}

{-
  burn#595f07bc query_id:uint64 amount:(VarUInteger 16)
                response_destination:MsgAddress custom_payload:(Maybe ^Cell)
                = InternalMsgBody;
-}

() burn_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
  (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = get_wallet_data();
  int query_id = in_msg_body~load_query_id();
  int jetton_amount = in_msg_body~load_coins();
  slice response_address = in_msg_body~load_msg_addr();

  throw_unless(error::unauthorized_transfer, equal_slice_bits(owner_address, sender_address));

  balance -= fee::gas_consumption + fwd_fee + jetton_amount;
  throw_unless(error::not_enough_tons, balance > 0);

  var msg_body = begin_cell()
      .store_op(op::unwrap_notification)
      .store_query_id(query_id)
      .store_coins(jetton_amount)
      .store_slice(owner_address)
      .end_cell();

  var msg = begin_cell()
    .store_msg_flag(msg_flag::non_bounceable)
    .store_slice(response_address)
    .store_coins(jetton_amount)
    .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_ref(msg_body);

  send_raw_message(msg.end_cell(), PAY_FEES_SEPARATELY);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) {
    return ();
  }
  slice sender_address = cs~load_msg_addr();
  cs~load_msg_addr(); ;; skip dst
  cs~load_coins(); ;; skip value
  cs~skip_bits(1); ;; skip extracurrency collection
  cs~load_coins(); ;; skip ihr_fee
  int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

  int op = in_msg_body~load_op();

  if (op == op::transfer) { ;; outgoing transfer
    send_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
    return ();
  }

  if (op == op::internal_transfer) { ;; incoming transfer
    receive_tokens(in_msg_body, sender_address, fwd_fee, msg_value);
    return ();
  }

  if (op == op::external_transfer) { ;; incoming transfer
    receive_tokens_externally(in_msg_body, sender_address, fwd_fee, msg_value);
    return ();
  }

  if (op == op::burn) { ;; burn
    burn_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
    return ();
  }

  throw(error::unknown_op);
}
