;; This is jetton wallet fabric: contract that mimics to
;; JettonMinter but it doesn't mint jettons itself, instead
;; it only mints wallets which mint tokens for themselves

#include "stdlib.func";
#include "jetton-utils.func";
#include "error-codes.func";
#include "op-codes.func";
#include "messages.func";
#include "params.func";

;; 6905(computational_gas_price) * 1000(cur_gas_price) = 6905000
;; ceil(6905000) = 10000000 ~= 0.01 TON
;; we also require to add fwd_fee here
const int fee::provide_address_gas_consumption = 13000000;

;; storage scheme
;; storage#_ content:^Cell jetton_wallet_code:^Cell = Storage;

(cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
            ds~load_ref(), ;; content
            ds~load_ref() ;; jetton_wallet_code
    );
}

() mint_wallet(slice to_address, cell jetton_wallet_code) impure inline {
    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    var msg = begin_cell()
            .store_msg_flag(msg_flag::non_bounceable)
            .store_slice(to_wallet_address)
            .store_coins(0)
            .store_uint(4 + 2 + 0, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init);
    send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS);
}

() recv_internal(int msg_value, cell msg_cell, slice in_msg_body) impure {

    int op = in_msg_body~load_op();
    int query_id = in_msg_body~load_query_id();

    (cell content, cell jetton_wallet_code) = load_data();

    if (op == op::mint) {
        slice to_address = in_msg_body~load_msg_addr();
        return mint_wallet(to_address, jetton_wallet_code);
    }

    if (op == op::provide_wallet_address) {
        throw_unless(error::discovery_fee_not_matched, msg_value > fee::provide_address_gas_consumption);

        ;; Parse sender address
        slice cs = msg_cell.begin_parse();
        cs~skip_bits(4); ;; message flags
        slice sender_address = cs~load_msg_addr();

        slice owner_address = in_msg_body~load_msg_addr();
        int include_address? = in_msg_body~load_uint(1);

        cell included_address = include_address?
                ? begin_cell().store_slice(owner_address).end_cell()
                : null();

        var msg = begin_cell()
                .store_msg_flag(msg_flag::bounceable)
                .store_slice(sender_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_op(op::take_wallet_address)
                .store_query_id(query_id);

        if (is_resolvable?(owner_address)) {
            msg = msg.store_slice(calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code));
        } else {
            msg = msg.store_uint(0, 2); ;; addr_none
        }
        send_raw_message(msg.store_maybe_ref(included_address).end_cell(), CARRY_REMAINING_GAS);
        return ();
    }

    throw(error::unknown_op);
}

slice addr_none() asm "<b 0 2 u, b> <s PUSHSLICE";

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (cell content, cell jetton_wallet_code) = load_data();
    return (5000000000000000000,  ;; We do not count pTONs thus just return 5bn TONs
            -1,                   ;; Unchangable
            addr_none(),          ;; No admin
            content,
            jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    (cell content, cell jetton_wallet_code) = load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}
